/**********************************************************
 * @file    Port.h
 * @brief   Port Driver Header File (AUTOSAR Standard)
 * @details This file contains data type definitions,
 *          GPIO mapping macros, and declarations of standard
 *          AUTOSAR APIs for the Port Driver. This driver is
 *          designed for STM32F103 using SPL.
 * @version 1.0
 * @date    2024-06-19
 * @author  HALA Academy
 **********************************************************/

#ifndef PORT_H
#define PORT_H

#include "Std_Types.h"         /* AUTOSAR standard data types */
#include "stm32f10x_gpio.h"    /* STM32F103 standard peripheral library */
#include "stm32f10x_rcc.h"     /* STM32F103 RCC definitions */

#define PIN_COUNT 40 /* Total number of GPIO pins (A0..A15, B0..B15, C0..C15, D0..D15) */

/**********************************************************
 * Definitions of PortId values for GPIO ports
 **********************************************************/
#define PORT_ID_A   0   /* GPIOA */
#define PORT_ID_B   1   /* GPIOB */
#define PORT_ID_C   2   /* GPIOC */
#define PORT_ID_D   3   /* GPIOD */

/**********************************************************
 * Macro to get PORT pointer based on PortNum
 **********************************************************/
#define PORT_GET_PORT(PortNum) \
    ((PortNum) == PORT_ID_A ? GPIOA : \
    (PortNum) == PORT_ID_B ? GPIOB : \
    (PortNum) == PORT_ID_C ? GPIOC : \
    (PortNum) == PORT_ID_D ? GPIOD : NULL)

/**********************************************************
 * Macro to get Pin Mask for each GPIO pin (0-15)
 **********************************************************/
#define PORT_GET_PIN_MASK(PinNum)   (1U << (PinNum))

/**********************************************************
 * Definitions of pin modes and states
 **********************************************************/
#define PORT_PIN_MODE_DIO       0
#define PORT_PIN_MODE_ADC       1
#define PORT_PIN_MODE_PWM       2
#define PORT_PIN_MODE_SPI       3
#define PORT_PIN_MODE_CAN       4
#define PORT_PIN_MODE_LIN       5

#define PORT_PIN_PULL_NONE      0
#define PORT_PIN_PULL_UP        1
#define PORT_PIN_PULL_DOWN      2

#define PORT_PIN_LEVEL_LOW      0
#define PORT_PIN_LEVEL_HIGH     1

/**********************************************************
 * AUTOSAR Port Driver data type definitions
 **********************************************************/

/**
 * @typedef Port_PinType
 * @brief   Identifier type for a Port pin (0..47: A0..A15, B0..B15, C0..C15)
 */
typedef uint8 Port_PinType;

/**
 * @typedef Port_PinDirectionType
 * @brief   Enum for input/output direction of a pin
 */
typedef enum {
    PORT_PIN_IN  = 0x00,   /**< Input  */
    PORT_PIN_OUT = 0x01    /**< Output */
} Port_PinDirectionType;

/**
 * @typedef Port_PinModeType
 * @brief   Identifier for pin functional mode (DIO, ADC, PWM, etc.)
 */
typedef uint8 Port_PinModeType;

/**
 * @struct Port_PinConfigType
 * @brief  Configuration for each pin (auto-generated by tool or manually)
 */
typedef struct {
    uint8  PortNum;                     /**< 0=A, 1=B, 2=C, 3=D */
    Port_PinType  PinNum;               /**< 0..15 */
    Port_PinModeType Mode;              /**< Functional mode */
    Port_PinDirectionType Direction;    /**< Initial direction */
    uint8 speed;                        /**< Pin speed: 2MHz, 10MHz, 50MHz */
    uint8 DirectionChangeable;          /**< 1=allow direction change at runtime */
    uint8 Level;                        /**< Initial level if output */
    uint8 Pull;                         /**< Pull type: none, up, down */
    uint8 ModeChangeable;               /**< 1=allow mode change at runtime */
} Port_PinConfigType;

/**
 * @struct Port_ConfigType
 * @brief  Structure containing configuration for all pins (used in init)
 */
typedef struct {
    const Port_PinConfigType* PinConfigs; /**< Pointer to array of pin configs */
    uint16 PinCount;                      /**< Number of configured pins */
} Port_ConfigType;

/**********************************************************
 * Array to save each GPIO pin configuration
 **********************************************************/
extern Port_PinConfigType PortCfg_Pins[PIN_COUNT];

/**********************************************************
 * Macro definitions for version, vendor, module ID used in VersionInfo
 **********************************************************/
#define PORT_VENDOR_ID          1234U
#define PORT_MODULE_ID          81U
#define PORT_SW_MAJOR_VERSION   1U
#define PORT_SW_MINOR_VERSION   0U
#define PORT_SW_PATCH_VERSION   0U

/**********************************************************
 * AUTOSAR Port Driver API function prototypes
 **********************************************************/

/**
 * @brief   Initialize all Ports/Pins
 * @param[in] ConfigPtr Pointer to port/pin configuration
 */
void Port_Init(const Port_ConfigType* ConfigPtr);

/**
 * @brief   Set direction of a specific Port pin (if allowed)
 * @param[in] Pin        Pin identifier
 * @param[in] Direction  Direction to set
 */
void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction);

/**
 * @brief   Refresh direction of all pins that are not changeable at runtime
 */
void Port_RefreshPortDirection(void);

/**
 * @brief   Get version information of Port Driver
 * @param[out] versioninfo  Pointer to Std_VersionInfoType structure to receive version
 */
void Port_GetVersionInfo(Std_VersionInfoType* versioninfo);

/**
 * @brief   Set functional mode of a specific pin (if allowed)
 * @param[in] Pin    Pin identifier
 * @param[in] Mode   Functional mode to set
 */
void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode);

void Port_ApplyPinConfig(const Port_PinConfigType* pinCfg);
#endif /* PORT_H */
